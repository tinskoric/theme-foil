foil_palette_ <- function(palette = "tricolor", reverse = FALSE, ...) {
foil_palettes <- list(
`blu` = foil_colors_("slate blue", "ultramarine"),
`flower` = foil_colors_("lavender (floral)", "wisteria"),
`fried` = foil_colors_("dark red", "golden brown"),
`ocean` = foil_colors_("coral", "ultramarine"),
`pink` = foil_colors_("lavender (floral)", "plum"),
`tricolor` = foil_colors_("dark red", "olive", "ultramarine"),
`olive` = foil_colors_("cal poly green", "dark red", "olive")
)
palette_ <- foil_palettes[[palette]]
if(reverse)
palette_ <- rev(palette_)
colorRampPalette(palette_, ...)
}
# theme_foil
theme_foil <- function(base_size = 12, # base_size is rel(1)
base_family = "Space Mono",
base_line_size = base_size / 24,
base_rect_size = base_size / 24) {
half_line <- base_size / 3
theme(
line = element_line(
color = "#E8E9E9", linewidth = base_line_size,
linetype = 1, lineend = "butt"
),
rect = element_rect(
fill = "#1D1E20", color = "#E8E9E9",
linewidth = base_rect_size, linetype = 1
),
text = element_text(
family = base_family, face = "plain",
color = "#E8E9E9", size = base_size,
lineheight = 0.9, hjust = 0.5, vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE
),
axis.line =          element_blank(),
axis.line.x =        NULL,
axis.line.y =        NULL,
axis.text = element_text(size = rel(0.8), color = "#E8E9E9"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line / 2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line / 2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line / 2), hjust = 1),
axis.text.y.right =  element_text(margin = margin(l = 0.8 * half_line / 2), hjust = 0),
axis.ticks =         element_line(color = "#E8E9E9"),
axis.ticks.length =  unit(half_line / 2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x =       element_text(
margin = margin(t = half_line / 1.24),
vjust = 1
),
axis.title.x.top =   element_text(
margin = margin(b = half_line / 1.24),
vjust = 0
),
axis.title.y =       element_text(
angle = 90,
margin = margin(r = half_line / 1.24),
vjust = 1
),
axis.title.y.right = element_text(
angle = -90,
margin = margin(l = half_line / 1.24),
vjust = 0
),
legend.background =  element_rect(color = NA),
legend.spacing =     unit(2 * half_line, "pt"),
legend.spacing.x =    NULL,
legend.spacing.y =    NULL,
legend.margin =      margin(half_line, half_line, half_line, half_line),
legend.key =         element_rect(fill = "transparent", color = NA),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8)),
legend.text.align =  NULL,
legend.title =       element_text(hjust = 0),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   NULL,
legend.justification = "center",
legend.box =         NULL,
legend.box.margin =  margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background =   element_rect(fill = "transparent", color = NA),
panel.border =       element_rect(color = "#E8E9E9", fill = NA, size = 1.2),
panel.grid =         element_line(color = "#E8E9E9", fill = NA),
panel.grid.minor =   element_line(linewidth = rel(0.3)),
panel.spacing =      unit(half_line, "pt"),
panel.spacing.x =    NULL,
panel.spacing.y =    NULL,
panel.ontop    =     FALSE,
strip.background =   element_rect(fill = "transparent", color = NA),
strip.clip =         "inherit",
strip.text =         element_text(
color = "#E8E9E9",
size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)
),
strip.text.x =       NULL,
strip.text.y =       element_text(angle = -90),
strip.text.y.left =  element_text(angle = 90),
strip.placement =    "inside",
strip.placement.x =  NULL,
strip.placement.y =  NULL,
strip.switch.pad.grid = unit(half_line / 2, "pt"),
strip.switch.pad.wrap = unit(half_line / 2, "pt"),
plot.background =    element_rect(color = "#1D1E20"),
plot.title =         element_text( # font size "large"
size = rel(1.2),
hjust = 0, vjust = 1,
margin = margin(b = half_line)
),
plot.title.position = "panel",
plot.subtitle =      element_text( # font size "regular"
hjust = 0, vjust = 1,
margin = margin(b = half_line)
),
plot.caption =       element_text( # font size "small"
size = rel(0.8),
hjust = 1, vjust = 1,
margin = margin(t = half_line)
),
plot.caption.position = "panel",
plot.tag =           element_text(
size = rel(1.2),
hjust = 0.5, vjust = 0.5
),
plot.tag.position =  'topleft',
plot.margin =        margin(half_line, half_line, half_line, half_line),
complete = TRUE
)
}
library(themeFoil)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
ggplot(all_state_counties_income, aes(reorder(County, Median_Household_Income, sum), Bachelor_or_Higher, color = Rural_Condition, label1 = County, label2 = Rural_Condition, label3 = Median_Household_Income, label4 = Bachelor_or_Higher)) + geom_point() +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Rural Trendline"), rural_state_counties_income) +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Urban Trendline"), urban_state_counties_income) +
theme_foil()
# Tin Skoric
# https://tins.page/
# 2023
# The themes included here are some custom themes I have made that I often use
# in my works. The main theme here is "theme_foil" which I use for all writings
# posted up on my personal website. The others are mostly variations on that.
# Use these themes if you want, it would be super cool.
library(ggplot2)
library(extrafont)
# theme_foil palette
foil_colors_ <- function(...) {
foil_colors_list <- c(
`cal poly green` = "#0F4F10",
`coral` = "#F7854E",
`dark red` = "#8E0F10",
`eerie black` = "#1D1E20",
`golden brown` = "#8E6210",
`gray` = "#838485",
`lavender (floral)` = "#B679C8",
`olive` = "#8E8F10",
`platinum` = "#E8E9E9",
`plum` = "#865087",
`slate blue` = "#605CB7",
`steel blue` = "#4D78A3",
`ultramarine` = "#0F0F90",
`wisteria` = "#B0A9DD"
)
colors_ <- c(...)
if(is.null(colors_))
return(foil_colors_list)
foil_colors_list[colors_]
}
foil_palette_ <- function(palette = "tricolor", reverse = FALSE, ...) {
foil_palettes <- list(
`blu` = foil_colors_("slate blue", "ultramarine"),
`flower` = foil_colors_("lavender (floral)", "wisteria"),
`fried` = foil_colors_("dark red", "golden brown"),
`ocean` = foil_colors_("coral", "ultramarine"),
`pink` = foil_colors_("lavender (floral)", "plum"),
`tricolor` = foil_colors_("dark red", "olive", "ultramarine"),
`olive` = foil_colors_("cal poly green", "dark red", "olive")
)
palette_ <- foil_palettes[[palette]]
if(reverse)
palette_ <- rev(palette_)
colorRampPalette(palette_, ...)
}
# theme_foil
theme_foil <- function(base_size = 12, # base_size is rel(1)
base_family = "Space Mono",
base_line_size = base_size / 24,
base_rect_size = base_size / 24) {
half_line <- base_size / 3
theme(
line = element_line(
color = "#E8E9E9", linewidth = base_line_size,
linetype = 1, lineend = "butt"
),
rect = element_rect(
fill = "#1D1E20", color = "#E8E9E9",
linewidth = base_rect_size, linetype = 1
),
text = element_text(
family = base_family, face = "plain",
color = "#E8E9E9", size = base_size,
lineheight = 0.9, hjust = 0.5, vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE
),
axis.line =          element_blank(),
axis.line.x =        NULL,
axis.line.y =        NULL,
axis.text = element_text(size = rel(0.8), color = "#E8E9E9"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line / 2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line / 2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line / 2), hjust = 1),
axis.text.y.right =  element_text(margin = margin(l = 0.8 * half_line / 2), hjust = 0),
axis.ticks =         element_line(color = "#E8E9E9"),
axis.ticks.length =  unit(half_line / 2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x =       element_text(
margin = margin(t = half_line / 1.24),
vjust = 1
),
axis.title.x.top =   element_text(
margin = margin(b = half_line / 1.24),
vjust = 0
),
axis.title.y =       element_text(
angle = 90,
margin = margin(r = half_line / 1.24),
vjust = 1
),
axis.title.y.right = element_text(
angle = -90,
margin = margin(l = half_line / 1.24),
vjust = 0
),
legend.background =  element_rect(color = NA),
legend.spacing =     unit(2 * half_line, "pt"),
legend.spacing.x =    NULL,
legend.spacing.y =    NULL,
legend.margin =      margin(half_line, half_line, half_line, half_line),
legend.key =         element_rect(fill = "transparent", color = NA),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8)),
legend.text.align =  NULL,
legend.title =       element_text(hjust = 0),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   NULL,
legend.justification = "center",
legend.box =         NULL,
legend.box.margin =  margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background =   element_rect(fill = "transparent", color = NA),
panel.border =       element_rect(color = "#E8E9E9", fill = NA, size = 1.2),
panel.grid =         element_line(color = "#E8E9E9", size = 1.2, linetype = 2),
panel.grid.minor =   element_line(linewidth = rel(0.3)),
panel.spacing =      unit(half_line, "pt"),
panel.spacing.x =    NULL,
panel.spacing.y =    NULL,
panel.ontop    =     FALSE,
strip.background =   element_rect(fill = "transparent", color = NA),
strip.clip =         "inherit",
strip.text =         element_text(
color = "#E8E9E9",
size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)
),
strip.text.x =       NULL,
strip.text.y =       element_text(angle = -90),
strip.text.y.left =  element_text(angle = 90),
strip.placement =    "inside",
strip.placement.x =  NULL,
strip.placement.y =  NULL,
strip.switch.pad.grid = unit(half_line / 2, "pt"),
strip.switch.pad.wrap = unit(half_line / 2, "pt"),
plot.background =    element_rect(color = "#1D1E20"),
plot.title =         element_text( # font size "large"
size = rel(1.2),
hjust = 0, vjust = 1,
margin = margin(b = half_line)
),
plot.title.position = "panel",
plot.subtitle =      element_text( # font size "regular"
hjust = 0, vjust = 1,
margin = margin(b = half_line)
),
plot.caption =       element_text( # font size "small"
size = rel(0.8),
hjust = 1, vjust = 1,
margin = margin(t = half_line)
),
plot.caption.position = "panel",
plot.tag =           element_text(
size = rel(1.2),
hjust = 0.5, vjust = 0.5
),
plot.tag.position =  'topleft',
plot.margin =        margin(half_line, half_line, half_line, half_line),
complete = TRUE
)
}
library(themeFoil)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
ggplot(all_state_counties_income, aes(reorder(County, Median_Household_Income, sum), Bachelor_or_Higher, color = Rural_Condition, label1 = County, label2 = Rural_Condition, label3 = Median_Household_Income, label4 = Bachelor_or_Higher)) + geom_point() +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Rural Trendline"), rural_state_counties_income) +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Urban Trendline"), urban_state_counties_income) +
theme_foil()
# Tin Skoric
# https://tins.page/
# 2023
# The themes included here are some custom themes I have made that I often use
# in my works. The main theme here is "theme_foil" which I use for all writings
# posted up on my personal website. The others are mostly variations on that.
# Use these themes if you want, it would be super cool.
library(ggplot2)
library(extrafont)
# theme_foil palette
foil_colors_ <- function(...) {
foil_colors_list <- c(
`cal poly green` = "#0F4F10",
`coral` = "#F7854E",
`dark red` = "#8E0F10",
`eerie black` = "#1D1E20",
`golden brown` = "#8E6210",
`gray` = "#838485",
`lavender (floral)` = "#B679C8",
`olive` = "#8E8F10",
`platinum` = "#E8E9E9",
`plum` = "#865087",
`slate blue` = "#605CB7",
`steel blue` = "#4D78A3",
`ultramarine` = "#0F0F90",
`wisteria` = "#B0A9DD"
)
colors_ <- c(...)
if(is.null(colors_))
return(foil_colors_list)
foil_colors_list[colors_]
}
foil_palette_ <- function(palette = "tricolor", reverse = FALSE, ...) {
foil_palettes <- list(
`blu` = foil_colors_("slate blue", "ultramarine"),
`flower` = foil_colors_("lavender (floral)", "wisteria"),
`fried` = foil_colors_("dark red", "golden brown"),
`ocean` = foil_colors_("coral", "ultramarine"),
`pink` = foil_colors_("lavender (floral)", "plum"),
`tricolor` = foil_colors_("dark red", "olive", "ultramarine"),
`olive` = foil_colors_("cal poly green", "dark red", "olive")
)
palette_ <- foil_palettes[[palette]]
if(reverse)
palette_ <- rev(palette_)
colorRampPalette(palette_, ...)
}
# theme_foil
theme_foil <- function(base_size = 12, # base_size is rel(1)
base_family = "Space Mono",
base_line_size = base_size / 24,
base_rect_size = base_size / 24) {
half_line <- base_size / 3
theme(
line = element_line(
color = "#E8E9E9", linewidth = base_line_size,
linetype = 1, lineend = "butt"
),
rect = element_rect(
fill = "#1D1E20", color = "#E8E9E9",
linewidth = base_rect_size, linetype = 1
),
text = element_text(
family = base_family, face = "plain",
color = "#E8E9E9", size = base_size,
lineheight = 0.9, hjust = 0.5, vjust = 0.5, angle = 0,
margin = margin(), debug = FALSE
),
axis.line =          element_blank(),
axis.line.x =        NULL,
axis.line.y =        NULL,
axis.text = element_text(size = rel(0.8), color = "#E8E9E9"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line / 2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line / 2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line / 2), hjust = 1),
axis.text.y.right =  element_text(margin = margin(l = 0.8 * half_line / 2), hjust = 0),
axis.ticks =         element_line(color = "#E8E9E9"),
axis.ticks.length =  unit(half_line / 2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x =       element_text(
margin = margin(t = half_line / 1.24),
vjust = 1
),
axis.title.x.top =   element_text(
margin = margin(b = half_line / 1.24),
vjust = 0
),
axis.title.y =       element_text(
angle = 90,
margin = margin(r = half_line / 1.24),
vjust = 1
),
axis.title.y.right = element_text(
angle = -90,
margin = margin(l = half_line / 1.24),
vjust = 0
),
legend.background =  element_rect(color = NA),
legend.spacing =     unit(2 * half_line, "pt"),
legend.spacing.x =    NULL,
legend.spacing.y =    NULL,
legend.margin =      margin(half_line, half_line, half_line, half_line),
legend.key =         element_rect(fill = "transparent", color = NA),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8)),
legend.text.align =  NULL,
legend.title =       element_text(hjust = 0),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   NULL,
legend.justification = "center",
legend.box =         NULL,
legend.box.margin =  margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background =   element_rect(fill = "transparent", color = NA),
panel.border =       element_rect(color = "#E8E9E9", fill = NA, size = 1.2),
panel.spacing =      unit(half_line, "pt"),
panel.spacing.x =    NULL,
panel.spacing.y =    NULL,
panel.ontop    =     FALSE,
strip.background =   element_rect(fill = "transparent", color = NA),
strip.clip =         "inherit",
strip.text =         element_text(
color = "#E8E9E9",
size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)
),
strip.text.x =       NULL,
strip.text.y =       element_text(angle = -90),
strip.text.y.left =  element_text(angle = 90),
strip.placement =    "inside",
strip.placement.x =  NULL,
strip.placement.y =  NULL,
strip.switch.pad.grid = unit(half_line / 2, "pt"),
strip.switch.pad.wrap = unit(half_line / 2, "pt"),
plot.background =    element_rect(color = "#1D1E20"),
plot.title =         element_text( # font size "large"
size = rel(1.2),
hjust = 0, vjust = 1,
margin = margin(b = half_line)
),
plot.title.position = "panel",
plot.subtitle =      element_text( # font size "regular"
hjust = 0, vjust = 1,
margin = margin(b = half_line)
),
plot.caption =       element_text( # font size "small"
size = rel(0.8),
hjust = 1, vjust = 1,
margin = margin(t = half_line)
),
plot.caption.position = "panel",
plot.tag =           element_text(
size = rel(1.2),
hjust = 0.5, vjust = 0.5
),
plot.tag.position =  'topleft',
plot.margin =        margin(half_line, half_line, half_line, half_line),
complete = TRUE
)
}
library(themeFoil)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
ggplot(all_state_counties_income, aes(reorder(County, Median_Household_Income, sum), Bachelor_or_Higher, color = Rural_Condition, label1 = County, label2 = Rural_Condition, label3 = Median_Household_Income, label4 = Bachelor_or_Higher)) + geom_point() +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Rural Trendline"), rural_state_counties_income) +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Urban Trendline"), urban_state_counties_income) +
theme_foil()
library(themeFoil)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
ggplot(all_state_counties_income, aes(reorder(County, Median_Household_Income, sum), Bachelor_or_Higher, color = Rural_Condition, label1 = County, label2 = Rural_Condition, label3 = Median_Household_Income, label4 = Bachelor_or_Higher)) + geom_point() +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Rural Trendline"), rural_state_counties_income) +
geom_smooth(method = lm, se = FALSE, color = "white", aes(group=1, linetype = "Urban Trendline"), urban_state_counties_income) +
theme_foil()
library(themeFoil)
